#include <cstdio>
#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <stack>

using namespace std;

#define pb push_back
#define mp make_pair

vector<int> adj[875720],adjr[875720];
vector<pair<int,int> >gv;
int endtm[875720];
int mrk[875720];
int tme;
vector<int> sze;
stack<int> st;

void do_dfs1(int v){
    st.push(v);

    while(!st.empty()){
        v= st.top();
        st.pop();

        if(mrk[v]==2) continue;

        if(mrk[v]==0){
            mrk[v]++;
            st.push(v);
        }else if(mrk[v]==1){
            mrk[v]++;
            endtm[v]= tme++;
            continue;
        }

        for(int i=0;i<adjr[v].size();i++){
            if(!mrk[adjr[v][i]]){
                st.push(adjr[v][i]);
            }
        }
    }
    return;
}

void do_dfs2(int v){
    st.push(v);

    while(!st.empty()){
        v= st.top();
        st.pop();

        if(mrk[v]) continue;

        mrk[v]=true;
        tme++;
        for(int i=0;i<adj[v].size();i++){
            if(!mrk[adj[v][i]]){
                st.push(adj[v][i]);
            }
        }
    }
    return;
}

int main(){
    freopen("SCC.txt","r",stdin);
    freopen("out.txt","w",stdout);
    int n;
    cin >> n;
    int x,y;
    while(scanf("%d%d",&x,&y)==2){
        gv.pb(mp(x-1,y-1));
        adjr[y-1].pb(x-1);
    }
    //cout << gv.size() << endl;
    memset(mrk,0,sizeof(mrk));
    tme=0;
    for(int i=n-1;i>=0;i--){
        if(!mrk[i]){
            do_dfs1(i);
        }
    }

    for(int i=0;i<gv.size();i++){
        adj[endtm[gv[i].first]].pb(endtm[gv[i].second]);
    }
    /*for(int i=0;i<n;i++){
        for(int j=0;j<adj[i].size();j++){
            cout << adj[i][j] << " ";
         }
         cout << endl;
     }*/

    memset(mrk,0,sizeof(mrk));
    for(int i=n-1;i>=0;i--){
        if(!mrk[i]){
            tme=0;
            do_dfs2(i);
            sze.pb(tme);
        }
    }
    sort(sze.begin(),sze.end(),greater<int>());
    for(int i=0;i<5 && i<sze.size();i++){
        cout << sze[i] << " ";
    }

    cout << endl;
    return 0;
}
